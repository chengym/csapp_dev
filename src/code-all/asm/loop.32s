	.file	"loop.c"
	.text
	.globl	fact_dw
	.type	fact_dw, @function
fact_dw:
.LFB0:
	.cfi_startproc
	movl	4(%esp), %edx
	movl	$1, %eax
.L3:
	imull	%edx, %eax
	subl	$1, %edx
	testl	%edx, %edx
	jg	.L3
	rep ret
	.cfi_endproc
.LFE0:
	.size	fact_dw, .-fact_dw
	.globl	fact_while
	.type	fact_while, @function
fact_while:
.LFB1:
	.cfi_startproc
	movl	4(%esp), %edx
	testl	%edx, %edx
	jle	.L7
	movl	$1, %eax
.L6:
	imull	%edx, %eax
	subl	$1, %edx
	jne	.L6
	rep ret
.L7:
	movl	$1, %eax
	ret
	.cfi_endproc
.LFE1:
	.size	fact_while, .-fact_while
	.globl	fact_for1
	.type	fact_for1, @function
fact_for1:
.LFB2:
	.cfi_startproc
	movl	4(%esp), %edx
	testl	%edx, %edx
	jle	.L11
	movl	$1, %eax
.L10:
	imull	%edx, %eax
	subl	$1, %edx
	jne	.L10
	rep ret
.L11:
	movl	$1, %eax
	ret
	.cfi_endproc
.LFE2:
	.size	fact_for1, .-fact_for1
	.globl	fact_for2
	.type	fact_for2, @function
fact_for2:
.LFB3:
	.cfi_startproc
	movl	4(%esp), %ecx
	cmpl	$1, %ecx
	jle	.L15
	movl	$2, %edx
	movl	$1, %eax
.L14:
	imull	%edx, %eax
	addl	$1, %edx
	cmpl	%edx, %ecx
	jge	.L14
	rep ret
.L15:
	movl	$1, %eax
	ret
	.cfi_endproc
.LFE3:
	.size	fact_for2, .-fact_for2
	.globl	sum_dw
	.type	sum_dw, @function
sum_dw:
.LFB4:
	.cfi_startproc
	movl	4(%esp), %edx
	movl	$0, %eax
.L18:
	addl	(%edx), %eax
	movl	4(%edx), %edx
	testl	%edx, %edx
	jne	.L18
	rep ret
	.cfi_endproc
.LFE4:
	.size	sum_dw, .-sum_dw
	.globl	sum_while
	.type	sum_while, @function
sum_while:
.LFB5:
	.cfi_startproc
	movl	4(%esp), %edx
	testl	%edx, %edx
	je	.L22
	movl	$0, %eax
.L21:
	addl	(%edx), %eax
	movl	4(%edx), %edx
	testl	%edx, %edx
	jne	.L21
	rep ret
.L22:
	movl	$0, %eax
	ret
	.cfi_endproc
.LFE5:
	.size	sum_while, .-sum_while
	.globl	sum_for
	.type	sum_for, @function
sum_for:
.LFB6:
	.cfi_startproc
	movl	4(%esp), %edx
	testl	%edx, %edx
	je	.L26
	movl	$0, %eax
.L25:
	addl	(%edx), %eax
	movl	4(%edx), %edx
	testl	%edx, %edx
	jne	.L25
	rep ret
.L26:
	movl	$0, %eax
	ret
	.cfi_endproc
.LFE6:
	.size	sum_for, .-sum_for
	.globl	puzzle
	.type	puzzle, @function
puzzle:
.LFB7:
	.cfi_startproc
	movl	8(%esp), %eax
	andl	4(%esp), %eax
	movl	$1, %edx
	movl	12(%esp), %ecx
	sall	%cl, %edx
	movl	%edx, %ecx
	cmpl	$-1, %edx
	je	.L28
	movl	$-1, %edx
.L29:
	xorl	%edx, %eax
	shrl	$2, %edx
	cmpl	%ecx, %edx
	ja	.L29
.L28:
	rep ret
	.cfi_endproc
.LFE7:
	.size	puzzle, .-puzzle
	.globl	sfact_while
	.type	sfact_while, @function
sfact_while:
.LFB8:
	.cfi_startproc
	movl	4(%esp), %eax
	testl	%eax, %eax
	jle	.L33
	movl	$1, %edx
.L32:
	imull	%eax, %edx
	subl	$1, %eax
	jne	.L32
	jmp	.L31
.L33:
	movl	$1, %edx
.L31:
	movl	8(%esp), %eax
	movl	%edx, (%eax)
	ret
	.cfi_endproc
.LFE8:
	.size	sfact_while, .-sfact_while
	.ident	"GCC: (Ubuntu 4.8.2-19ubuntu1) 4.8.2"
	.section	.note.GNU-stack,"",@progbits
